{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","children","style","overflow","overflowX","height","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de4d665e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"robot\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\nexport default CardList;\n","import React from 'react';\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className=\"pad2\">\n            <input\n                aria-label=\"Search Robots\"\n                className=\"pad3 ba b--green bg-lightest-blue\"\n                type=\"search\"\n                placeholder=\"search robots\"\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = ({ children }) => {\n    return (\n        <div\n            style={{\n                overflow: 'scroll',\n                overflowX: 'hidden',\n\n                height: '500px'\n            }}\n        >\n            {children}\n        </div>\n    );\n};\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            hasError: false\n        };\n    }\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h1> Ooooops not good</h1>;\n        }\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        return <h1 className=\"f1\"> Robots Friends</h1>;\n    }\n}\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.robots\n    };\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name\n                .toLocaleLowerCase()\n                .includes(searchField.toLocaleLowerCase());\n        });\n        return isPending ? (\n            <h1>loading</h1>\n        ) : (\n            <div className=\"tc\">\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants.js';\n\nexport const setSearchField = Text => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: Text\n});\n\nexport const requestRobots = () => dispatch => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error =>\n            dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n        );\n};\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n};\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n};\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {\n                robots: action.payload,\n                isPending: false\n            });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {\n                error: action.payload,\n                isPending: false\n            });\n        default:\n            return state;\n    }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}